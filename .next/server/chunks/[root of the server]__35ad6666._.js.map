{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 102, "column": 0}, "map": {"version":3,"sources":["file://E%3A/coding%20things/developers/personal%20finance%20visualizer/p-f-v/lib/db.ts"],"sourcesContent":["import mongoose, { Connection } from \"mongoose\";\r\nimport dotenv from \"dotenv\";\r\ndotenv.config({ path: \".env.local\" }); \r\n\r\nconst MONGODB_URL = process.env.MONGO_URI as string;\r\n\r\nif (!MONGODB_URL) {\r\n  throw new Error(\"MongoDB URI not found!\");\r\n}\r\n\r\n// Fix: Properly define global cache using globalThis\r\ndeclare global {\r\n  var mongoose: { conn: Connection | null; promise: Promise<Connection> | null };\r\n}\r\n\r\nglobalThis.mongoose = globalThis.mongoose || { conn: null, promise: null };\r\n\r\nasync function connect() {\r\n  if (globalThis.mongoose.conn) {\r\n    return globalThis.mongoose.conn;\r\n  }\r\n\r\n  if (!globalThis.mongoose.promise) {\r\n    globalThis.mongoose.promise = mongoose\r\n      .connect(MONGODB_URL, {\r\n        dbName: \"PFV\", // Ensure a database name is provided\r\n        bufferCommands: false,\r\n      })\r\n      .then((mongoose) => mongoose.connection);\r\n  }\r\n\r\n  globalThis.mongoose.conn = await globalThis.mongoose.promise;\r\n  return globalThis.mongoose.conn;\r\n}\r\nexport default connect;\r\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,uIAAA,CAAA,UAAM,CAAC,MAAM,CAAC;IAAE,MAAM;AAAa;AAEnC,MAAM,cAAc,QAAQ,GAAG,CAAC,SAAS;AAEzC,IAAI,CAAC,aAAa;IAChB,MAAM,IAAI,MAAM;AAClB;AAOA,WAAW,QAAQ,GAAG,WAAW,QAAQ,IAAI;IAAE,MAAM;IAAM,SAAS;AAAK;AAEzE,eAAe;IACb,IAAI,WAAW,QAAQ,CAAC,IAAI,EAAE;QAC5B,OAAO,WAAW,QAAQ,CAAC,IAAI;IACjC;IAEA,IAAI,CAAC,WAAW,QAAQ,CAAC,OAAO,EAAE;QAChC,WAAW,QAAQ,CAAC,OAAO,GAAG,yGAAA,CAAA,UAAQ,CACnC,OAAO,CAAC,aAAa;YACpB,QAAQ;YACR,gBAAgB;QAClB,GACC,IAAI,CAAC,CAAC,WAAa,SAAS,UAAU;IAC3C;IAEA,WAAW,QAAQ,CAAC,IAAI,GAAG,MAAM,WAAW,QAAQ,CAAC,OAAO;IAC5D,OAAO,WAAW,QAAQ,CAAC,IAAI;AACjC;uCACe","debugId":null}},
    {"offset": {"line": 140, "column": 0}, "map": {"version":3,"sources":["file://E%3A/coding%20things/developers/personal%20finance%20visualizer/p-f-v/models/Transaction.ts"],"sourcesContent":["import mongoose, { Schema, Document } from \"mongoose\";\r\n\r\n// Define TypeScript Interface\r\nexport interface ITransaction extends Document {\r\n  amount: number;\r\n  date: Date;\r\n  description?: string;\r\n  category: \"Food\" | \"Transportation\" | \"Entertainment\" | \"Utilities\" | \"Shopping\" | \"Bills\" | \"Other\";\r\n}\r\n\r\nconst transactionSchema = new Schema<ITransaction>({\r\n  amount: {\r\n    type: Number,\r\n    required: true, // Fixed typo: require â†’ required\r\n    min: 0,\r\n  },\r\n  date: {\r\n    type: Date,\r\n    required: true,\r\n    default: Date.now, // Fixed: Use function reference instead of calling it immediately\r\n  },\r\n  description: {\r\n    type: String,\r\n    trim: true,\r\n  },\r\n  category: {\r\n    type: String, \r\n    required: true, \r\n    enum: [\"Food\", \"Transportation\", \"Entertainment\", \"Utilities\", \"Shopping\", \"Bills\"] \r\n  },\r\n});\r\n\r\nconst Transaction = mongoose.models.Transaction || mongoose.model<ITransaction>(\"transactions\", transactionSchema);\r\n\r\nexport default Transaction;\r\n"],"names":[],"mappings":";;;AAAA;;AAUA,MAAM,oBAAoB,IAAI,yGAAA,CAAA,SAAM,CAAe;IACjD,QAAQ;QACN,MAAM;QACN,UAAU;QACV,KAAK;IACP;IACA,MAAM;QACJ,MAAM;QACN,UAAU;QACV,SAAS,KAAK,GAAG;IACnB;IACA,aAAa;QACX,MAAM;QACN,MAAM;IACR;IACA,UAAU;QACR,MAAM;QACN,UAAU;QACV,MAAM;YAAC;YAAQ;YAAkB;YAAiB;YAAa;YAAY;SAAQ;IACrF;AACF;AAEA,MAAM,cAAc,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,WAAW,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAe,gBAAgB;uCAEjF","debugId":null}},
    {"offset": {"line": 181, "column": 0}, "map": {"version":3,"sources":["file://E%3A/coding%20things/developers/personal%20finance%20visualizer/p-f-v/app/api/transactions/%5Bid%5D/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport connect from \"@/lib/db\";\r\nimport Transaction from \"@/models/Transaction\";\r\n\r\n// DELETE: Delete a tansaction\r\nexport async function DELETE(_: Request, context: { params: { id: string } }) {\r\n    await connect();\r\n    try {\r\n      const { id } = await context.params;\r\n      const deletedTransaction = await Transaction.findByIdAndDelete(id);\r\n  \r\n      if (!deletedTransaction) {\r\n        return NextResponse.json({ error: \"Transaction not found\" }, { status: 404 });\r\n      }\r\n  \r\n      return NextResponse.json({ success: true, message: \"Transaction deleted successfully\" });\r\n    } catch (error) {\r\n      console.error(\"Error deleting Transaction:\", error);\r\n      return NextResponse.json({ error: \"Failed to delete transaction\" }, { status: 500 });\r\n    }\r\n  }"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAGO,eAAe,OAAO,CAAU,EAAE,OAAmC;IACxE,MAAM,CAAA,GAAA,2GAAA,CAAA,UAAO,AAAD;IACZ,IAAI;QACF,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM,QAAQ,MAAM;QACnC,MAAM,qBAAqB,MAAM,uHAAA,CAAA,UAAW,CAAC,iBAAiB,CAAC;QAE/D,IAAI,CAAC,oBAAoB;YACvB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAwB,GAAG;gBAAE,QAAQ;YAAI;QAC7E;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAM,SAAS;QAAmC;IACxF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA+B,GAAG;YAAE,QAAQ;QAAI;IACpF;AACF","debugId":null}}]
}